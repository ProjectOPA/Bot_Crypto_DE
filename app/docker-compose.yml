version: "3.3"

services:
    
  database:
    container_name: mongo-project-api-binance
    image: mongo:5.0 # vérifier la version pour vulnérabilité et compatibilité avec le Dockerfile
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_DATABASE=auth
      - MONGO_INITDB_ROOT_PASSWORD=pass
    networks: 
      - my-network-from-compose
    ports:
      - '27017:27017'
    volumes: 
      - ./.data:/.data/db

  mongoexpress:
    container_name: mongo-express-api-binance
    image: mongo-express:1.0 # vérifier la version pour vulnérabilité et compatibilité avec le Dockerfile
    depends_on:
      - database
    networks: 
      - my-network-from-compose
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo-project-api-binance 
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=pass
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=pass
    ports:
      - '8081:8081'
    volumes: 
      - ./.data:/.data/db 

  zookeeper:
    image: wurstmeister/zookeeper # vérifier la version pour vulnérabilité et compatibilité avec le Dockerfile
    container_name: zookeeper
    ports:
      - "2181"
    networks: 
      - my-network-from-compose

  kafka:
    image: wurstmeister/kafka # vérifier la version pour vulnérabilité et compatibilité avec le Dockerfile
    container_name: app-kafka-1
    depends_on:
      - zookeeper
    ports:
      - "9092-9094:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: ${PUBLIC_IP}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks: 
      - my-network-from-compose
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  kafkaui:
    image: provectuslabs/kafka-ui # vérifier la version pour vulnérabilité et compatibilité avec le Dockerfile
    container_name: kafkaui
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "8080:8080"
    networks: 
      - my-network-from-compose
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"

  historic_handler: # Service qui se charge de l'extraction et de la transformation des données historiques
    image: historic_handler:latest
    container_name: historic_handler
    networks:
      - my-network-from-compose
    depends_on:
      - database

  stream_producer:
    image: stream_producer:latest
    container_name: stream_producer
    networks:
      - my-network-from-compose
    depends_on:
      - kafka
      - database

  stream_loader:
    image: stream_loader:latest
    container_name: stream_loader
    networks:
      - my-network-from-compose
    depends_on:
      - kafka
      - database

  opa_api:
    image: opa_api:latest
    container_name: opa_api
    networks:
      - my-network-from-compose
    ports:
      - "8000:8000"
    depends_on:
      - database

    

networks:
  my-network-from-compose:
    driver: bridge